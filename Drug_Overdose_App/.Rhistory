x = c(1, 1)
while (x[i] < 4e6) {
x[i + 1] = x[i - 1] + x[i]
i = i + 1
}
x = x[-i]
print(x)
sum = 0
for (i in x) {
if (i %% 2 == 0) {
sum = sum + i
}
}
cat('\n')
print(sum)
m = matrix(c(2,4,6), c(2,4,6), (3,2))
m = matrix(c(2,4,6), c(2,4,6), nrow = 2, ncol = 3)
m
m = matrix(c(2,4,6), c(2,4,6), nrow = 2, ncol = 3)
m
n = matrix(c(5,6,7), c(5,6,7), nrow = 2, ncol = 3)
n
solve(m,n)
n = matrix(c(5,6,7), c(5,6,7), nrow = 3, ncol = 2)
n
n = matrix(c(5,6), c(5,6),c(5,6), nrow = 3, ncol = 2)
n
n = matrix(c(5,6), c(5,6), c(5,6), nrow = 3, ncol = 2)
m = matrix(1;10, nrow = 2, ncol = 3)
m
m = matrix(1:10, nrow = 2, ncol = 3)
m
m = matrix(1:10, nrow = 2, ncol = 3)
m = matrix(1:10, nrow = 3, ncol = 3)
m = matrix(1:9, nrow = 3, ncol = 3)
m
n
m
n = matrix(1:6, nrow = 2, ncol = 3)
n
solve(m,n)
m = matrix(1:6, nrow = 3, ncol = 2)
m
n = matrix(1:6, nrow = 2, ncol = 3)
n
solve(m,n)
m = matrix(1:9, nrow = 3, ncol = 3)
m
n = matrix(1:9, nrow = 3, ncol = 3)
n
solve(m,n)
n = matrix(10:19, nrow = 3, ncol = 3)
n
solve(m,n)
m %*% n
m = matrix(1:9, nrow = 3, ncol = 3)
m
n = matrix(10:19, nrow = 3, ncol = 3)
n
m %*% n
m = matrix(1:6, nrow = 3, ncol = 2)
m
n = matrix(10:16, nrow = 2, ncol = 3)
n
m %*% n
m = matrix(1:6, nrow = 3, ncol = 2)
m
n = matrix(10:16, nrow = 2, ncol = 3)
n
n = matrix(11:16, nrow = 2, ncol = 3)
n
m = matrix(1:6, nrow = 3, ncol = 2)
m
n = matrix(11:16, nrow = 2, ncol = 3)
n
m %*% n
m = matrix(1:15, nrow = 3, ncol = 5)
m
n = seq(1:30, by = 2)
n
help("seq")
n = seq(1,30, by = 2)
n
length(n)
m %*% n
m*n
n = seq(1,16, by = 2)
n
n = seq(1,10, by = 2)
n
m*n
m %*% n
m
n
nrow(m)
ncol(m)
for (row in 1:nrow(m)) {
for (col in 1:ncol(m)) {
print(row,col)
}
}
print(row)
print(m[row,col])
for (col in 1:ncol(m)) {
print(m[row,col])
}
help("paste0")
help("paste")
paste0(1:12)
paste(1:12)
paste(1, 1:12)
paste0(2, 1:12)
factor(1:12)
factor('a','b','c')
factor(c('a','b','c'))
c("aa" "ba" "ca" "da" "ea" "ab" "bb" "cb" "db" "eb" "ac" "bc" "cc" "dc" "ec" "ad" "bd" "cd" "dd" "ed" "ae" "be" "ce" "de" "ee")
str_split(x, sep = ' ')
strsplit(x,split = ' ')
list("aa" "ba" "ca" "da" "ea" "ab" "bb" "cb" "db" "eb" "ac" "bc" "cc" "dc" "ec" "ad" "bd" "cd" "dd" "ed" "ae" "be" "ce" "de" "ee")
paste(x)
y = ("aa" "ba" "ca" "da" "ea" "ab" "bb" "cb" "db" "eb" "ac" "bc" "cc" "dc" "ec" "ad" "bd" "cd" "dd" "ed" "ae" "be" "ce" "de" "ee"")
paste(y, coll = ',')
y = ("aa" "ba" "ca" "da" "ea" "ab" "bb" "cb" "db" "eb" "ac" "bc" "cc" "dc" "ec" "ad" "bd" "cd" "dd" "ed" "ae" "be" "ce" "de" "ee"")
abc = c('a', 'b', 'c', 'd', 'e')
x = paste0(abc, 'a')
x
y = paste0(abc, 'b')
y
abc = c('a', 'b', 'c', 'd', 'e')
x = paste0(abc, 'a')
y = paste0(abc, 'b')
z = paste0(abc, 'c')
q = paste0(abc, 'd')
w = paste0(abc, 'e')
cat(x,y,z,q,w)
paste(x,y,z,q,w)
paste(x,y,z,q,w, sep = ' ')
cat(x,y,z,q,w, sep = ' ')
strsplit(cat(x,y,z,q,w, sep = ' '))
strsplit(cat(x,y,z,q,w, sep = ' '), split = ' ')
cat(x,y,z,q,w, sep = ' ')
cat(x,y,z,q,w)
as.character(cat(x,y,z,q,w))
cat(x,y,z,q,w)
compare = function(arg1, arg2) {
if (length(arg1) == length(arg2)) {
print('Equal Length')
} else {
print("Not Equal Length")
}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
compare("EPS568","SummerA")
compare("EPS568","Summer")
compare = function(arg1, arg2) {
if (length(arg1) == length(arg2)) {
print('Equal Length')
} else {
print("Not Equal Length")
}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
length("EPS568")
help("length")
compare = function(arg1, arg2) {
if (nchar(arg1) == nchar(arg2)) {
print('Equal Length')
} else {
print("Not Equal Length")
}
}
compare("EPS568","Summer")
compare("EPS568","SummerA")
length("EPS568")
strsplit(Names, split = ' ')
Names <- "John Andrew Thomas"
strsplit(Names, split = ' ')
paste0('list_N', Names)
paste0(list_N, '@gmail.com')
Names <- "John Andrew Thomas"
list_N <- strsplit(Names, split = ' ')
paste0(list_N, '@gmail.com')
paste(list_N, '@gmail.com')
list_N
list_N <- strsplit(Names, split = ' ')[[1]]
paste(list_N, '@gmail.com')
list_N <- strsplit(Names, split = '')[[1]]
paste(list_N, '@gmail.com')
paste(list_N, '@gmail.com')
Names <- "John Andrew Thomas"
list_N <- strsplit(Names, split = ' ')[[1]]
paste(list_N, '@gmail.com')
paste(list_N, '@gmail.com', sep = '')
# x3 = x2 + x1
i = 2
x = c(1, 1)
while (x[i] < 4e6) {
x[i + 1] = x[i - 1] + x[i]
i = i + 1
}
x = x[-i]
print(x)
a = 1:10
a[3]
a = 11:14
a[2]
# x3 = x2 + x1
i = 2
x = c(1, 1)
y = 0
while (x[i] < 4e6) {
x[i + 1] = x[i - 1] + x[i]
if (x[i] %% 2 == 0) {
y = y + x[i]
}
i = i + 1
}
x = x[-i]
print(y)
return(m)
Median_AD = function(vec) {
n = median(vec)
for (i in vec) {
m = median(i - n)
return(m)
}
}
Median_AD(1:15)
Median_AD = function(vec) {
n = median(vec)
for (i in vec) {
m = median(abs(i - n))
return(m)
}
}
Median_AD(1:15)
1:15
# x3 = x2 + x1
i = 2
x = c(1, 1)
y = 0
while (x[i] < 4e6) {
x[i + 1] = x[i - 1] + x[i]
if (x[i] %% 2 == 0) {
y = y + x[i]
}
i = i + 1
}
x = x[-i]
print(y)
for (row in 1:nrow(m)) {
for (col in 1:ncol(m)) {
print(m[row,col])
}
}
while (b < 4e6) {
if (b %% 2 == 0) {
summ = summ + b
}
temp = a + b
a = b
b = temp
}
a = 1
b = 2
summ = 0
while (b < 4e6) {
if (b %% 2 == 0) {
summ = summ + b
}
temp = a + b
a = b
b = temp
}
summ
mul_mat = function(mat, vec) {
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
for (i in vec) {
sum(mat[row,col]*vec[i])
} } } }
m = matrix(1:15, nrow = 3, ncol = 5)
n = seq(1,10, by = 2)
mul_mat(m,n)
mul_mat = function(mat, vec) {
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
for (i in vec) {
x = sum(mat[row,col]*vec[i])
print(x)
} } } }
m = matrix(1:15, nrow = 3, ncol = 5)
n = seq(1,10, by = 2)
mul_mat(m,n)
mul_mat = function(mat, vec) {
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
for (i in vec) {
return sum(mat[row,col]*vec[i])
mul_mat = function(mat, vec) {
sum = 0
for (row in 1:nrow(mat)) {
for (col in 1:ncol(mat)) {
for (i in vec) {
sum = sum + (mat[row,col]*vec[i])
} } }
sum
}
m = matrix(1:15, nrow = 3, ncol = 5)
n = seq(1,10, by = 2)
mul_mat(m,n)
m = median(abs(i - n)) + 1
return(m)
Median_AD = function(vec) {
n = median(vec)
for (i in vec) {
m = median(abs(i - n)) + 1
return(m)
}
}
Median_AD(1:15)
1:15
median(1:15)
Median_AD(1:15)
Mat_mul = function(mat, vec) {
c(mat%*%vec)
}
Median_AD = function(vec) {
n = median(vec)
median(abs(vec - n))
return(m)
}
}
Median_AD = function(vec) {
n = median(vec)
median(abs(vec - n))
return(m)
}
Median_AD(1:15)
Median_AD = function(vec) {
n = median(vec)
m = median(abs(vec - n))
return(m)
}
Median_AD(1:15)
Median_AD = function(vec) {
m = median(abs(vec - median(vec)))
return(m)
}
Median_AD(1:15)
Median_AD = function(vec) {
m = median(abs(vec - median(vec)))
return(m)
}
Median_AD(1:15)
Median_AD = function(vec) {
m = median(abs(vec - median(vec)))
return(m)
}
Median_AD(1:15)
Median_AD = function(vec) {
m = median(abs(vec - median(vec)))
return(m)
}
Median_AD(1:15)
Median_AD = function(vec) {
m = median(abs(vec - median(vec)))
return(m)
}
Median_AD(1:15)
Median_AD = function(vec) {
m = median(abs(vec - median(vec)))
return(m)
}
Median_AD(1:15)
Names <- "John Andrew Thomas"
list_N <- strsplit(Names, split = ' ')[[1]]
paste(list_N, '@gmail.com', sep = '', collapse = ';')
Names <- "John Andrew Thomas"
list_N <- strsplit(Names, split = ' ')[[1]]
paste(list_N, '@gmail.com', sep = '', collapse = ' ; ')
Median_AD = function(vec) {
m = (abs(vec - median(vec)))
return(m)
}
Median_AD(1:15)
Median_AD = function(vec) {
m = abs(vec - median(vec))
return(m)
}
Median_AD(1:15)
Median_AD = function(vec) {
m = median(abs(vec - median(vec)))
return(m)
}
Median_AD(1:15)
rep(abc, 5)
rep(abc, each = 5)
paste(x, y)```
abc = c('a', 'b', 'c', 'd', 'e')
x = rep(abc, 5)
y = rep(abc, each = 5)
paste(x, y)
abc = c('a', 'b', 'c', 'd', 'e')
x = rep(abc, 5)
y = rep(abc, each = 5)
paste(x, y, sep = '')
alphabets = c('a', 'b', 'c', 'd', 'e')
double = rep(alphabets, each = 5)
paste(alphabets, double, sep = '')
variable.name = 5
variable.name
typeof(fruit)
help("typeof")
names(fruit)
names(fruit) <- c('a', 'b', 'c', 'd')
names(fruit)
typeof(names(fruit))
#3
babies %>% group_by(Name)
#1
babies <- tbl_df(read.table('names/yob2014.txt', header = FALSE, sep = ',', col.names = c('Name', 'Sex', 'Number')))
# Load dataset
library(ggplot2)
data %>% select(season, points) %>% ggplot(aes(x = points)) + geom_histogram()
load("Knicks.rda")
#1
ggplot(data = data) + aes(x = season, y = points/opp) + geom_boxplot()
#2
df <- data %>% group_by(visiting, season) %>% summarise(mean(points), mean(opp))
#1
babies <- tbl_df(read.table('names/yob2014.txt', header = FALSE, sep = ',', col.names = c('Name', 'Sex', 'Number')))
library(ggplot2)
library(dplyr)
# Load dataset
library(ggplot2)
data("cars")
#1
g <- ggplot(data = cars) + aes(x = dist, y = speed) + geom_point()
g
#2
g <- g + xlab("Speed (mpg)") + ylab("Stopping Distance (ft)") + ggtitle("Relationship of Distance and Speed in Cars")
#3
g + geom_point(aes(color = "red", shape = 'pch', size = 17))
#1
data("faithful")
faithful <- faithful %>% mutate(length = ifelse(eruptions < 3.2, "short", "long"))
#2
ggplot(data = faithful) + aes(x = length, y = waiting) + geom_boxplot()
#3
ggplot(data = faithful) + aes(x = waiting) + geom_density(aes(color = length))
#4
# Waiting time for short lenght eruption has a lower median compared to short length eruptions. There is an overlap of maximum waiting time and minimum waiting time between short and long eruptions, respectively. Both eruption types do not have any outliers.
load("Knicks.rda")
#1
ggplot(data = data) + aes(x = season, y = points/opp) + geom_boxplot()
#2
df <- data %>% group_by(visiting, season) %>% summarise(mean(points), mean(opp))
df
ggplot(data = data, aes(x = season)) + geom_bar(aes(fill = visiting))
#3
data %>% select(season, points) %>% ggplot(aes(x = points)) + geom_histogram()
#1
babies <- tbl_df(read.table('names/yob2014.txt', header = FALSE, sep = ',', col.names = c('Name', 'Sex', 'Number')))
#2
babies %>% select(Name, starts_with('K'), Number) %>% summarise(sum(Number))
#3
#3
babies %>% group_by(Name)
#3
babies %>% group_by(Sex)
#3
babies %>% group_by(Name) %>% summarise(n())
#3
babies %>% group_by(Name) %>% summarise(n = n()) %>% filter(n == 2)
#3
babies %>% group_by(Name, Sex) %>% summarise(n = n()) %>% filter(n == 2)
#3
babies %>% group_by(Name) %>% summarise(n = n()) %>% filter(n == 2)
#3
babies %>% group_by(Name)
#3
babies %>% group_by(Name) %>% summarise(n = n()) %>% filter(n == 2) %>% summarise(sum(n))
#3
babies %>% group_by(Name) %>% summarise(n = n()) %>% filter(n == 2) %>% summarise(total = sum(n))
head(babies)
#4
babies %>% filter(Number > 5000)
#4
babies %>% filter(Number > 5000, Number < 6000)
#4
babies %>% filter(Number > 5000, Number < 6000) %>% arrange(desc(Number))
?group_by
#5
babies %>% select(Name, starts_with('A'))
#5
babies %>% select(Name, starts_with('A', 'B'))
print(i
)
#5
for i in babies$Names {
print(i
)
babies$Name
#5
for (i in babies$Name) {
print(i)
}
setwd("~/Github/Shiny_App_Project/Drug_Overdose_App")
shiny::runApp()
